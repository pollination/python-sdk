# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.43.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import pollination_sdk
from pollination_sdk.models.billing_info import BillingInfo  # noqa: E501
from pollination_sdk.rest import ApiException

class TestBillingInfo(unittest.TestCase):
    """BillingInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test BillingInfo
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = pollination_sdk.models.billing_info.BillingInfo()  # noqa: E501
        if include_optional :
            return BillingInfo(
                cancel_url = '0', 
                last_payment = null, 
                next_payment = null, 
                paused_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                paused_from = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                paused_reason = null, 
                payment_information = null, 
                signup_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                update_url = '0', 
                user_email = '0'
            )
        else :
            return BillingInfo(
                cancel_url = '0',
                last_payment = null,
                payment_information = null,
                signup_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                update_url = '0',
                user_email = '0',
        )

    def testBillingInfo(self):
        """Test BillingInfo"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
