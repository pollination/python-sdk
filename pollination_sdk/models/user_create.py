# coding: utf-8

"""
    Pollination Server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.10.18
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class UserCreate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'email': 'str',
        'name': 'str',
        'password': 'str',
        'picture_url': 'str',
        'username': 'str'
    }

    attribute_map = {
        'description': 'description',
        'email': 'email',
        'name': 'name',
        'password': 'password',
        'picture_url': 'picture_url',
        'username': 'username'
    }

    def __init__(self, description='', email=None, name=None, password=None, picture_url=None, username=None, local_vars_configuration=None):  # noqa: E501
        """UserCreate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._email = None
        self._name = None
        self._password = None
        self._picture_url = None
        self._username = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.email = email
        self.name = name
        self.password = password
        self.picture_url = picture_url
        self.username = username

    @property
    def description(self):
        """Gets the description of this UserCreate.  # noqa: E501

        A description of the user  # noqa: E501

        :return: The description of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserCreate.

        A description of the user  # noqa: E501

        :param description: The description of this UserCreate.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this UserCreate.  # noqa: E501

        The contact email for the Organization  # noqa: E501

        :return: The email of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreate.

        The contact email for the Organization  # noqa: E501

        :param email: The email of this UserCreate.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def name(self):
        """Gets the name of this UserCreate.  # noqa: E501

        The display name for this user  # noqa: E501

        :return: The name of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserCreate.

        The display name for this user  # noqa: E501

        :param name: The name of this UserCreate.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this UserCreate.  # noqa: E501

        A password for this new user to authenticate with  # noqa: E501

        :return: The password of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserCreate.

        A password for this new user to authenticate with  # noqa: E501

        :param password: The password of this UserCreate.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def picture_url(self):
        """Gets the picture_url of this UserCreate.  # noqa: E501

        URL to the picture associated with this user  # noqa: E501

        :return: The picture_url of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this UserCreate.

        URL to the picture associated with this user  # noqa: E501

        :param picture_url: The picture_url of this UserCreate.  # noqa: E501
        :type picture_url: str
        """
        if self.local_vars_configuration.client_side_validation and picture_url is None:  # noqa: E501
            raise ValueError("Invalid value for `picture_url`, must not be `None`")  # noqa: E501

        self._picture_url = picture_url

    @property
    def username(self):
        """Gets the username of this UserCreate.  # noqa: E501

        The unique name of the user in small case without spaces  # noqa: E501

        :return: The username of this UserCreate.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserCreate.

        The unique name of the user in small case without spaces  # noqa: E501

        :param username: The username of this UserCreate.  # noqa: E501
        :type username: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserCreate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserCreate):
            return True

        return self.to_dict() != other.to_dict()
