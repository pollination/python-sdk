# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.25.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class TaxAmount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'amount': 'int',
        'inclusive': 'bool',
        'tax_rate': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'inclusive': 'inclusive',
        'tax_rate': 'tax_rate'
    }

    def __init__(self, amount=None, inclusive=None, tax_rate=None, local_vars_configuration=None):  # noqa: E501
        """TaxAmount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._amount = None
        self._inclusive = None
        self._tax_rate = None
        self.discriminator = None

        self.amount = amount
        self.inclusive = inclusive
        self.tax_rate = tax_rate

    @property
    def amount(self):
        """Gets the amount of this TaxAmount.  # noqa: E501


        :return: The amount of this TaxAmount.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TaxAmount.


        :param amount: The amount of this TaxAmount.  # noqa: E501
        :type amount: int
        """
        if self.local_vars_configuration.client_side_validation and amount is None:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def inclusive(self):
        """Gets the inclusive of this TaxAmount.  # noqa: E501


        :return: The inclusive of this TaxAmount.  # noqa: E501
        :rtype: bool
        """
        return self._inclusive

    @inclusive.setter
    def inclusive(self, inclusive):
        """Sets the inclusive of this TaxAmount.


        :param inclusive: The inclusive of this TaxAmount.  # noqa: E501
        :type inclusive: bool
        """
        if self.local_vars_configuration.client_side_validation and inclusive is None:  # noqa: E501
            raise ValueError("Invalid value for `inclusive`, must not be `None`")  # noqa: E501

        self._inclusive = inclusive

    @property
    def tax_rate(self):
        """Gets the tax_rate of this TaxAmount.  # noqa: E501


        :return: The tax_rate of this TaxAmount.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this TaxAmount.


        :param tax_rate: The tax_rate of this TaxAmount.  # noqa: E501
        :type tax_rate: str
        """
        if self.local_vars_configuration.client_side_validation and tax_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")  # noqa: E501

        self._tax_rate = tax_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaxAmount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaxAmount):
            return True

        return self.to_dict() != other.to_dict()
