# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.21.2
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class Discount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'coupon': 'Coupon',
        'end': 'datetime',
        'id': 'str',
        'metadata': 'object',
        'promotion_code': 'str',
        'start': 'datetime'
    }

    attribute_map = {
        'coupon': 'coupon',
        'end': 'end',
        'id': 'id',
        'metadata': 'metadata',
        'promotion_code': 'promotion_code',
        'start': 'start'
    }

    def __init__(self, coupon=None, end=None, id=None, metadata=None, promotion_code=None, start=None, local_vars_configuration=None):  # noqa: E501
        """Discount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._coupon = None
        self._end = None
        self._id = None
        self._metadata = None
        self._promotion_code = None
        self._start = None
        self.discriminator = None

        self.coupon = coupon
        if end is not None:
            self.end = end
        self.id = id
        if metadata is not None:
            self.metadata = metadata
        if promotion_code is not None:
            self.promotion_code = promotion_code
        self.start = start

    @property
    def coupon(self):
        """Gets the coupon of this Discount.  # noqa: E501


        :return: The coupon of this Discount.  # noqa: E501
        :rtype: Coupon
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this Discount.


        :param coupon: The coupon of this Discount.  # noqa: E501
        :type coupon: Coupon
        """
        if self.local_vars_configuration.client_side_validation and coupon is None:  # noqa: E501
            raise ValueError("Invalid value for `coupon`, must not be `None`")  # noqa: E501

        self._coupon = coupon

    @property
    def end(self):
        """Gets the end of this Discount.  # noqa: E501


        :return: The end of this Discount.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Discount.


        :param end: The end of this Discount.  # noqa: E501
        :type end: datetime
        """

        self._end = end

    @property
    def id(self):
        """Gets the id of this Discount.  # noqa: E501


        :return: The id of this Discount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Discount.


        :param id: The id of this Discount.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this Discount.  # noqa: E501


        :return: The metadata of this Discount.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Discount.


        :param metadata: The metadata of this Discount.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def promotion_code(self):
        """Gets the promotion_code of this Discount.  # noqa: E501


        :return: The promotion_code of this Discount.  # noqa: E501
        :rtype: str
        """
        return self._promotion_code

    @promotion_code.setter
    def promotion_code(self, promotion_code):
        """Sets the promotion_code of this Discount.


        :param promotion_code: The promotion_code of this Discount.  # noqa: E501
        :type promotion_code: str
        """

        self._promotion_code = promotion_code

    @property
    def start(self):
        """Gets the start of this Discount.  # noqa: E501


        :return: The start of this Discount.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Discount.


        :param start: The start of this Discount.  # noqa: E501
        :type start: datetime
        """
        if self.local_vars_configuration.client_side_validation and start is None:  # noqa: E501
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Discount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Discount):
            return True

        return self.to_dict() != other.to_dict()
