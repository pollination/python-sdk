# coding: utf-8

"""
    Pollination Server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.10.17
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class Job(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'api_version': 'str',
        'arguments': 'list[AnyOfJobArgumentJobPathArgument]',
        'description': 'str',
        'labels': 'dict(str, str)',
        'name': 'str',
        'source': 'str',
        'type': 'str'
    }

    attribute_map = {
        'annotations': 'annotations',
        'api_version': 'api_version',
        'arguments': 'arguments',
        'description': 'description',
        'labels': 'labels',
        'name': 'name',
        'source': 'source',
        'type': 'type'
    }

    def __init__(self, annotations=None, api_version='v1beta1', arguments=None, description=None, labels=None, name=None, source=None, type='Job', local_vars_configuration=None):  # noqa: E501
        """Job - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._api_version = None
        self._arguments = None
        self._description = None
        self._labels = None
        self._name = None
        self._source = None
        self._type = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if api_version is not None:
            self.api_version = api_version
        if arguments is not None:
            self.arguments = arguments
        if description is not None:
            self.description = description
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        self.source = source
        if type is not None:
            self.type = type

    @property
    def annotations(self):
        """Gets the annotations of this Job.  # noqa: E501

        An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.  # noqa: E501

        :return: The annotations of this Job.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Job.

        An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.  # noqa: E501

        :param annotations: The annotations of this Job.  # noqa: E501
        :type annotations: dict(str, str)
        """

        self._annotations = annotations

    @property
    def api_version(self):
        """Gets the api_version of this Job.  # noqa: E501


        :return: The api_version of this Job.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this Job.


        :param api_version: The api_version of this Job.  # noqa: E501
        :type api_version: str
        """
        if (self.local_vars_configuration.client_side_validation and
                api_version is not None and not re.search(r'^v1beta1$', api_version)):  # noqa: E501
            raise ValueError(r"Invalid value for `api_version`, must be a follow pattern or equal to `/^v1beta1$/`")  # noqa: E501

        self._api_version = api_version

    @property
    def arguments(self):
        """Gets the arguments of this Job.  # noqa: E501

        Input arguments for this job.  # noqa: E501

        :return: The arguments of this Job.  # noqa: E501
        :rtype: list[AnyOfJobArgumentJobPathArgument]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this Job.

        Input arguments for this job.  # noqa: E501

        :param arguments: The arguments of this Job.  # noqa: E501
        :type arguments: list[AnyOfJobArgumentJobPathArgument]
        """

        self._arguments = arguments

    @property
    def description(self):
        """Gets the description of this Job.  # noqa: E501

        Run description.  # noqa: E501

        :return: The description of this Job.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Job.

        Run description.  # noqa: E501

        :param description: The description of this Job.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this Job.  # noqa: E501

        Optional user data as a dictionary. User data is for user reference only and will not be used in the execution of the job.  # noqa: E501

        :return: The labels of this Job.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Job.

        Optional user data as a dictionary. User data is for user reference only and will not be used in the execution of the job.  # noqa: E501

        :param labels: The labels of this Job.  # noqa: E501
        :type labels: dict(str, str)
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Job.  # noqa: E501

        An optional name for this job. This name will be used a the display name for the run.  # noqa: E501

        :return: The name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Job.

        An optional name for this job. This name will be used a the display name for the run.  # noqa: E501

        :param name: The name of this Job.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this Job.  # noqa: E501

        The source url for downloading the recipe.  # noqa: E501

        :return: The source of this Job.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Job.

        The source url for downloading the recipe.  # noqa: E501

        :param source: The source of this Job.  # noqa: E501
        :type source: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501


        :return: The type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.


        :param type: The type of this Job.  # noqa: E501
        :type type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                type is not None and not re.search(r'^Job$', type)):  # noqa: E501
            raise ValueError(r"Invalid value for `type`, must be a follow pattern or equal to `/^Job$/`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Job):
            return True

        return self.to_dict() != other.to_dict()
