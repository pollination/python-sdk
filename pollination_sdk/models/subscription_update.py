# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.20.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class SubscriptionUpdate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'to_add': 'list[NewSubscriptionItem]',
        'to_delete': 'list[SubscriptionItem]',
        'to_subscribe': 'Price',
        'to_update': 'list[SubscriptionItem]'
    }

    attribute_map = {
        'to_add': 'to_add',
        'to_delete': 'to_delete',
        'to_subscribe': 'to_subscribe',
        'to_update': 'to_update'
    }

    def __init__(self, to_add=[], to_delete=[], to_subscribe=None, to_update=[], local_vars_configuration=None):  # noqa: E501
        """SubscriptionUpdate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._to_add = None
        self._to_delete = None
        self._to_subscribe = None
        self._to_update = None
        self.discriminator = None

        if to_add is not None:
            self.to_add = to_add
        if to_delete is not None:
            self.to_delete = to_delete
        if to_subscribe is not None:
            self.to_subscribe = to_subscribe
        if to_update is not None:
            self.to_update = to_update

    @property
    def to_add(self):
        """Gets the to_add of this SubscriptionUpdate.  # noqa: E501

        The items to add  # noqa: E501

        :return: The to_add of this SubscriptionUpdate.  # noqa: E501
        :rtype: list[NewSubscriptionItem]
        """
        return self._to_add

    @to_add.setter
    def to_add(self, to_add):
        """Sets the to_add of this SubscriptionUpdate.

        The items to add  # noqa: E501

        :param to_add: The to_add of this SubscriptionUpdate.  # noqa: E501
        :type to_add: list[NewSubscriptionItem]
        """

        self._to_add = to_add

    @property
    def to_delete(self):
        """Gets the to_delete of this SubscriptionUpdate.  # noqa: E501

        The items to delete  # noqa: E501

        :return: The to_delete of this SubscriptionUpdate.  # noqa: E501
        :rtype: list[SubscriptionItem]
        """
        return self._to_delete

    @to_delete.setter
    def to_delete(self, to_delete):
        """Sets the to_delete of this SubscriptionUpdate.

        The items to delete  # noqa: E501

        :param to_delete: The to_delete of this SubscriptionUpdate.  # noqa: E501
        :type to_delete: list[SubscriptionItem]
        """

        self._to_delete = to_delete

    @property
    def to_subscribe(self):
        """Gets the to_subscribe of this SubscriptionUpdate.  # noqa: E501

        The Pollination plan to subscribe to  # noqa: E501

        :return: The to_subscribe of this SubscriptionUpdate.  # noqa: E501
        :rtype: Price
        """
        return self._to_subscribe

    @to_subscribe.setter
    def to_subscribe(self, to_subscribe):
        """Sets the to_subscribe of this SubscriptionUpdate.

        The Pollination plan to subscribe to  # noqa: E501

        :param to_subscribe: The to_subscribe of this SubscriptionUpdate.  # noqa: E501
        :type to_subscribe: Price
        """

        self._to_subscribe = to_subscribe

    @property
    def to_update(self):
        """Gets the to_update of this SubscriptionUpdate.  # noqa: E501

        The items to update  # noqa: E501

        :return: The to_update of this SubscriptionUpdate.  # noqa: E501
        :rtype: list[SubscriptionItem]
        """
        return self._to_update

    @to_update.setter
    def to_update(self, to_update):
        """Sets the to_update of this SubscriptionUpdate.

        The items to update  # noqa: E501

        :param to_update: The to_update of this SubscriptionUpdate.  # noqa: E501
        :type to_update: list[SubscriptionItem]
        """

        self._to_update = to_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionUpdate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionUpdate):
            return True

        return self.to_dict() != other.to_dict()
