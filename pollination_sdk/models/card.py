# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.25.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class Card(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'brand': 'str',
        'country': 'str',
        'exp_month': 'int',
        'exp_year': 'int',
        'last4': 'str',
        'networks': 'object'
    }

    attribute_map = {
        'brand': 'brand',
        'country': 'country',
        'exp_month': 'exp_month',
        'exp_year': 'exp_year',
        'last4': 'last4',
        'networks': 'networks'
    }

    def __init__(self, brand=None, country=None, exp_month=None, exp_year=None, last4=None, networks=None, local_vars_configuration=None):  # noqa: E501
        """Card - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._brand = None
        self._country = None
        self._exp_month = None
        self._exp_year = None
        self._last4 = None
        self._networks = None
        self.discriminator = None

        self.brand = brand
        self.country = country
        self.exp_month = exp_month
        self.exp_year = exp_year
        self.last4 = last4
        self.networks = networks

    @property
    def brand(self):
        """Gets the brand of this Card.  # noqa: E501


        :return: The brand of this Card.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Card.


        :param brand: The brand of this Card.  # noqa: E501
        :type brand: str
        """
        if self.local_vars_configuration.client_side_validation and brand is None:  # noqa: E501
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def country(self):
        """Gets the country of this Card.  # noqa: E501


        :return: The country of this Card.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Card.


        :param country: The country of this Card.  # noqa: E501
        :type country: str
        """
        if self.local_vars_configuration.client_side_validation and country is None:  # noqa: E501
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def exp_month(self):
        """Gets the exp_month of this Card.  # noqa: E501


        :return: The exp_month of this Card.  # noqa: E501
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this Card.


        :param exp_month: The exp_month of this Card.  # noqa: E501
        :type exp_month: int
        """
        if self.local_vars_configuration.client_side_validation and exp_month is None:  # noqa: E501
            raise ValueError("Invalid value for `exp_month`, must not be `None`")  # noqa: E501

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this Card.  # noqa: E501


        :return: The exp_year of this Card.  # noqa: E501
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this Card.


        :param exp_year: The exp_year of this Card.  # noqa: E501
        :type exp_year: int
        """
        if self.local_vars_configuration.client_side_validation and exp_year is None:  # noqa: E501
            raise ValueError("Invalid value for `exp_year`, must not be `None`")  # noqa: E501

        self._exp_year = exp_year

    @property
    def last4(self):
        """Gets the last4 of this Card.  # noqa: E501


        :return: The last4 of this Card.  # noqa: E501
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this Card.


        :param last4: The last4 of this Card.  # noqa: E501
        :type last4: str
        """
        if self.local_vars_configuration.client_side_validation and last4 is None:  # noqa: E501
            raise ValueError("Invalid value for `last4`, must not be `None`")  # noqa: E501

        self._last4 = last4

    @property
    def networks(self):
        """Gets the networks of this Card.  # noqa: E501


        :return: The networks of this Card.  # noqa: E501
        :rtype: object
        """
        return self._networks

    @networks.setter
    def networks(self, networks):
        """Sets the networks of this Card.


        :param networks: The networks of this Card.  # noqa: E501
        :type networks: object
        """
        if self.local_vars_configuration.client_side_validation and networks is None:  # noqa: E501
            raise ValueError("Invalid value for `networks`, must not be `None`")  # noqa: E501

        self._networks = networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Card):
            return True

        return self.to_dict() != other.to_dict()
