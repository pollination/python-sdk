# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.25.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class PaymentMethod(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'billing_details': 'object',
        'card': 'Card',
        'id': 'str',
        'is_default': 'bool',
        'metadata': 'object',
        'type': 'AnyOfPaymentMethodTypestring'
    }

    attribute_map = {
        'billing_details': 'billing_details',
        'card': 'card',
        'id': 'id',
        'is_default': 'is_default',
        'metadata': 'metadata',
        'type': 'type'
    }

    def __init__(self, billing_details=None, card=None, id=None, is_default=False, metadata=None, type=None, local_vars_configuration=None):  # noqa: E501
        """PaymentMethod - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._billing_details = None
        self._card = None
        self._id = None
        self._is_default = None
        self._metadata = None
        self._type = None
        self.discriminator = None

        self.billing_details = billing_details
        if card is not None:
            self.card = card
        self.id = id
        if is_default is not None:
            self.is_default = is_default
        if metadata is not None:
            self.metadata = metadata
        self.type = type

    @property
    def billing_details(self):
        """Gets the billing_details of this PaymentMethod.  # noqa: E501


        :return: The billing_details of this PaymentMethod.  # noqa: E501
        :rtype: object
        """
        return self._billing_details

    @billing_details.setter
    def billing_details(self, billing_details):
        """Sets the billing_details of this PaymentMethod.


        :param billing_details: The billing_details of this PaymentMethod.  # noqa: E501
        :type billing_details: object
        """
        if self.local_vars_configuration.client_side_validation and billing_details is None:  # noqa: E501
            raise ValueError("Invalid value for `billing_details`, must not be `None`")  # noqa: E501

        self._billing_details = billing_details

    @property
    def card(self):
        """Gets the card of this PaymentMethod.  # noqa: E501


        :return: The card of this PaymentMethod.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentMethod.


        :param card: The card of this PaymentMethod.  # noqa: E501
        :type card: Card
        """

        self._card = card

    @property
    def id(self):
        """Gets the id of this PaymentMethod.  # noqa: E501


        :return: The id of this PaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethod.


        :param id: The id of this PaymentMethod.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this PaymentMethod.  # noqa: E501


        :return: The is_default of this PaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PaymentMethod.


        :param is_default: The is_default of this PaymentMethod.  # noqa: E501
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def metadata(self):
        """Gets the metadata of this PaymentMethod.  # noqa: E501


        :return: The metadata of this PaymentMethod.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentMethod.


        :param metadata: The metadata of this PaymentMethod.  # noqa: E501
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this PaymentMethod.  # noqa: E501


        :return: The type of this PaymentMethod.  # noqa: E501
        :rtype: AnyOfPaymentMethodTypestring
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.


        :param type: The type of this PaymentMethod.  # noqa: E501
        :type type: AnyOfPaymentMethodTypestring
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PaymentMethod):
            return True

        return self.to_dict() != other.to_dict()
