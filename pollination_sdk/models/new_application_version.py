# coding: utf-8

"""
    pollination-server

    Pollination Server OpenAPI Definition  # noqa: E501

    The version of the OpenAPI document: 0.43.0
    Contact: info@pollination.cloud
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pollination_sdk.configuration import Configuration


class NewApplicationVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'release_notes': 'str',
        'tag': 'str'
    }

    attribute_map = {
        'release_notes': 'release_notes',
        'tag': 'tag'
    }

    def __init__(self, release_notes='', tag=None, local_vars_configuration=None):  # noqa: E501
        """NewApplicationVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._release_notes = None
        self._tag = None
        self.discriminator = None

        if release_notes is not None:
            self.release_notes = release_notes
        self.tag = tag

    @property
    def release_notes(self):
        """Gets the release_notes of this NewApplicationVersion.  # noqa: E501

        Some useful release notes so users know what has changed in this version  # noqa: E501

        :return: The release_notes of this NewApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._release_notes

    @release_notes.setter
    def release_notes(self, release_notes):
        """Sets the release_notes of this NewApplicationVersion.

        Some useful release notes so users know what has changed in this version  # noqa: E501

        :param release_notes: The release_notes of this NewApplicationVersion.  # noqa: E501
        :type release_notes: str
        """

        self._release_notes = release_notes

    @property
    def tag(self):
        """Gets the tag of this NewApplicationVersion.  # noqa: E501

        The tag for this new version of the application  # noqa: E501

        :return: The tag of this NewApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this NewApplicationVersion.

        The tag for this new version of the application  # noqa: E501

        :param tag: The tag of this NewApplicationVersion.  # noqa: E501
        :type tag: str
        """
        if self.local_vars_configuration.client_side_validation and tag is None:  # noqa: E501
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewApplicationVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewApplicationVersion):
            return True

        return self.to_dict() != other.to_dict()
